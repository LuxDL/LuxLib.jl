steps:
  # CUDA Tests
  - group: ":julia: CUDA GPU"
    steps:
      - label: ":julia: Julia {{matrix.julia}} + {{matrix.test_group}} + CUDA GPU"
        plugins:
          - JuliaCI/julia#v1:
              version: "{{matrix.julia}}"
          - JuliaCI/julia-test#v1:
              test_args: "--quickfail"
          - JuliaCI/julia-coverage#v1:
              codecov: true
              dirs:
                - src
                - ext
        agents:
          queue: "juliagpu"
          cuda: "*"
        env:
          BACKEND_GROUP: "CUDA"
          LUXLIB_TEST_GROUP: "{{matrix.test_group}}"
        if: build.message !~ /\[skip tests\]/
        timeout_in_minutes: 60
        matrix:
          setup:
            julia:
              - "1"
            test_group:
              - "normalization"
              - "common_ops"
              - "others"
              - "normalization_sp"

  # Downstream CUDA Tests
  - group: ":telescope: Downstream CUDA"
    steps:
      - label: ":julia: {{matrix.repo}} (Julia {{matrix.julia}} + CUDA GPU)"
        plugins:
          - JuliaCI/julia#v1:
              version: "{{matrix.julia}}"
          - JuliaCI/julia-coverage#v1:
              codecov: true
              dirs:
                - src
                - ext
        command: |
          julia --code-coverage=user --color=yes --project -e '
            using Pkg

            repo = ENV["DOWNSTREAM_TEST_REPO"]

            println("--- :julia: Instantiating project")
            withenv("JULIA_PKG_PRECOMPILE_AUTO" => 0) do
              Pkg.instantiate()

              try
                Pkg.develop(repo)
                println("+++ :julia: Running tests")
                Pkg.test("$(repo)"; coverage=true)
              catch err
                err isa Pkg.Resolve.ResolverError || rethrow()
                @info "Not compatible with this release. No problem." exception=err
                exit(0)
              end
            end

            println("+++ :julia: Finished Downstream Test")'
        agents:
          queue: "juliagpu"
          cuda: "*"
        env:
          BACKEND_GROUP: "CUDA"
          GROUP: "CUDA"
          DOWNSTREAM_TEST_REPO: "{{matrix.repo}}"
        if: build.message !~ /\[skip tests\]/ || build.message !~ /\[skip downstream\]/
        timeout_in_minutes: 240
        matrix:
          setup:
            julia:
              - "1"
            repo:
              - "Lux"
              - "Boltz"

  # AMDGPU Tests
  - group: ":julia: AMD GPU"
    steps:
      - label: ":julia: Julia: {{matrix.julia}} + {{matrix.test_group}} + AMD GPU"
        plugins:
          - JuliaCI/julia#v1:
              version: "{{matrix.julia}}"
          - JuliaCI/julia-test#v1:
              test_args: "--quickfail"
          - JuliaCI/julia-coverage#v1:
              codecov: true
              dirs:
                - src
                - ext
        env:
          JULIA_AMDGPU_CORE_MUST_LOAD: "1"
          JULIA_AMDGPU_HIP_MUST_LOAD: "1"
          JULIA_AMDGPU_DISABLE_ARTIFACTS: "1"
          BACKEND_GROUP: "AMDGPU"
          LUXLIB_TEST_GROUP: "{{matrix.test_group}}"
        agents:
          queue: "juliagpu"
          rocm: "*"
          rocmgpu: "*"
        if: build.message !~ /\[skip tests\]/
        timeout_in_minutes: 60
        matrix:
          setup:
            julia:
              - "1"
            test_group:
              - "normalization"
              - "common_ops"
              - "others"
              - "normalization_sp"

  # Downstream AMDGPU Tests
  - group: ":telescope: Downstream AMD GPU"
    steps:
      - label: ":julia: {{matrix.repo}} (Julia {{matrix.julia}} + AMD GPU)"
        plugins:
          - JuliaCI/julia#v1:
              version: "{{matrix.julia}}"
          - JuliaCI/julia-coverage#v1:
              codecov: true
              dirs:
                - src
                - ext
        command: |
          julia --code-coverage=user --color=yes --project -e '
            using Pkg

            repo = ENV["DOWNSTREAM_TEST_REPO"]

            println("--- :julia: Instantiating project")
            withenv("JULIA_PKG_PRECOMPILE_AUTO" => 0) do
              Pkg.instantiate()

              try
                Pkg.develop(repo)
                println("+++ :julia: Running tests")
                Pkg.test("$(repo)"; coverage=true)
              catch err
                err isa Pkg.Resolve.ResolverError || rethrow()
                @info "Not compatible with this release. No problem." exception=err
                exit(0)
              end
            end

            println("+++ :julia: Finished Downstream Test")'
        agents:
          queue: "juliagpu"
          rocm: "*"
          rocmgpu: "*"
        env:
          GROUP: "AMDGPU"
          BACKEND_GROUP: "AMDGPU"
          JULIA_AMDGPU_CORE_MUST_LOAD: "1"
          JULIA_AMDGPU_HIP_MUST_LOAD: "1"
          JULIA_AMDGPU_DISABLE_ARTIFACTS: "1"
          DOWNSTREAM_TEST_REPO: "{{matrix.repo}}"
        if: build.message !~ /\[skip tests\]/ || build.message !~ /\[skip downstream\]/
        timeout_in_minutes: 240
        matrix:
          setup:
            julia:
              - "1"
            repo:
              - "Lux"
              - "Boltz"

env:
  RETESTITEMS_NWORKERS: 2
  RETESTITEMS_NWORKER_THREADS: 2
  SECRET_CODECOV_TOKEN: "wMpDLaAVEHe6EJAc+LZBl4jF3wADVN6F+15vr/ONJHOv/XXbtYovuc1PCQwhz0AzZjWpSO12IDTyKfwVgYvqaGYfQ9yGyplJtSu2MiL2k44B/IY+wEZhsfkBIhXlG89si5A/I+/f8T8QuwxBqBLh8fYq7oxC+gNzKhbj8vIT4n5hCusvYYGufgKRC2U9P4ij0Sf40egQ5B+StaTykqJNq1163UARjNBypHIVDbYE0HUHiF7WB4eI5LxBBzlcHmsUkuGp6ZlqAu/8C83k65lwDnyHDfjvBM24q9GQTDFA5r7RUfYKHElQEBPk3GhoJn7XGIfD2pC0VNcw5jYCwsX2mw==;U2FsdGVkX1+euKMib66zno5Kkw7OxXo6v4RnkAA/HElJM46qfX17VgZ9iVLg45jOOWRgghmyYuy2WQ8RcVbuOg=="
